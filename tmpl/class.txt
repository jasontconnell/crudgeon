using System;
using SqlMap.Attributes;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.Linq;

namespace LPGAStatsService.Data {
    [DataContract]
    [StoredProc(Name="Get{{.Name}}", ProcType=ProcType.Read)]
    [StoredProc(Name="Save{{.Name}}", ProcType=ProcType.Update)]
    public partial class {{ .Name }} : I{{ .Name }} {

        public {{.Name}}(){
            
        }

        {{- if (len .ConstructorFields) gt 0 }}
        public {{ .Name }}({{- range $index,$field := .ConstructorFields }} {{$field.Type}}{{if $field.Nullable}}?{{end}} {{$field.Name}}{{- if lt (plus1 $index) (len $.ConstructorFields)}},
                {{end}}{{- end}}) {
            {{- range $index,$field := .ConstructorFields }}
            this.{{$field.Name}} = {{$field.Name}};
            {{- end}}
        }
        {{- end }}

        {{- range $index,$field := .Fields }}
        {{- if not $field.JsonIgnore }}[DataMember(Name="{{$field.FieldName}}")]{{ end }}
        {{ if not $field.SqlIgnore }}[Column]{{else}}[IgnoreCol]{{ end }}
        public {{$field.Type}}{{if $field.Nullable}}?{{end}} {{$field.Name}} { 
                {{- if not $field.IsInterface }} get; set;
                {{- else if $field.Collection}}get { return Enumerable.Cast<{{$field.ElementType}}>({{$field.ConcreteProperty}}); } set { this.{{$field.ConcreteProperty}} = ({{$field.ConcreteType}})value; }
                {{- else}} get { return ({{$field.Type}})this.{{$field.ConcreteProperty}}; } set { this.{{$field.ConcreteProperty}} = ({{$field.ConcreteType}})value; }{{end}}  }
        {{- end }}

    }
}