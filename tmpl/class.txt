using System;
using SqlMap.Attributes;
{{ if not .Flags.JsonIgnore }}using System.Runtime.Serialization;{{ end }}
{{ if not .Flags.XmlIgnore }}using System.Xml.Serialization;{{ end }}
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Hasher.Attributes;

// this code is generated, do not modify. use partial classes / interfaces to add stuff
namespace {{ .Namespace }} {
    {{ if not .Flags.JsonIgnore }}[DataContract]{{end}}
    {{ if not .Flags.SqlIgnore }}[StoredProc(Name="Get{{.Name}}", ProcType=ProcType.Read)]
    [StoredProc(Name="Save{{.Name}}", ProcType=ProcType.Update)]
    [StoredProc(Name="Delete{{.Name}}", ProcType=ProcType.Delete)]{{ end }}
    {{ if .Flags.XmlRoot }}[XmlRoot("{{.Flags.XmlRootName}}")]{{ end }}
    public partial class {{ .Name }} : I{{ .Name }} {

        public {{.Name}}(){
            
        }

        {{- if (len .ConstructorFields) gt 0 }}
        public {{ .Name }}({{- range $index,$field := .ConstructorFields }} {{$field.Type}}{{if $field.Nullable}}?{{end}} {{$field.Name}}{{- if lt (plus1 $index) (len $.ConstructorFields)}},
                {{end}}{{- end}}) {
            {{- range $index,$field := .ConstructorFields }}
            this.{{$field.Name}} = {{$field.Name}};
            {{- end}}
        }
        {{- end }}
        {{- $genpkg := . }}
        {{- range $index,$field := .Fields }}
        {{ if $field.Key }}[HashKey({{$index}})]
        {{ end }}
        {{- if and ($field.IsBaseType) (not $field.SqlIgnore) (ne $field.Name "ID") (not $field.Key)}}[Hash({{$index}})]
        {{ end}}
        {{- if not $field.JsonIgnore }}[DataMember(Name="{{$field.FieldName}}")]
        {{ end }}

        {{- if (not $genpkg.Flags.XmlIgnore) }}
            {{- if and (not $field.XmlIgnore) (ne $field.Name "ID") (not $field.IsInterface) }}
                {{- if not $field.IsBaseType }}[XmlElement("{{$field.FieldName}}"{{ if $field.Collection }}, Type = typeof({{ if $field.XmlWrapper}}{{$field.Type}}{{else}}{{$field.ConcreteElementType}}{{end}}){{ end }})]
                {{ else if $field.IsBaseType }}[XmlAttribute(AttributeName="{{$field.FieldName}}")]
                {{ end }}
            {{- else if or (eq $field.Name "ID") (and (ne $field.Name "ID") ($field.IsInterface)) }}
                [XmlIgnore]
            {{ end }}
        {{ end }}

        {{- if not $field.SqlIgnore }}[Column{{- if $field.Key }}(Key=true){{ end}}]
        {{- else if (ne $field.Name "ID")}}[IgnoreCol]
        {{- end }}
        {{$field.Access}} {{$field.Type}}{{if $field.Nullable}}?{{end}} {{$field.Name}} { 
                {{- if not $field.IsInterface }} get; set;
                {{- else if $field.Collection}}get { return {{$field.ConcreteProperty}} == null ? null : Enumerable.Cast<{{$field.ElementType}}>({{$field.ConcreteProperty}}{{if $field.XmlWrapper }}.{{$field.FieldName}}{{ end }}); } 
                {{- else}} get { return ({{$field.Type}})this.{{$field.ConcreteProperty}}; } set { this.{{$field.ConcreteProperty}} = ({{$field.ConcreteType}})value; }{{end}}  }

        {{ if and (not $field.IsInterface) (not $field.XmlIgnore) ($field.XmlWrapper) }}
        {{$field.Access}} class {{$field.Type}} {
            [XmlElement("{{$field.XmlWrapperElement}}")]
            public {{$field.XmlWrapperType}} {{$field.FieldName}} { get; set; }
        }
        {{ end }}
        
        {{ end }}

        override public string ToString(){
            StringBuilder sb = new StringBuilder();
            {{- range $index,$field := .Fields }}
                {{- if not $field.IsInterface}}
                sb.AppendFormat("{0}: {1}{2}", "{{$field.Name}}", this.{{$field.Name}}, Environment.NewLine);
                {{- end}}
            {{- end}}
            return sb.ToString();
        }

    }
}